#!/bin/bash


# sidfax v1.1-dev
# 30.04.2013
# (c) Pasquale Fiorillo < info @ pasqualefiorillo.it > 2013
# 
# Based on:
# email2fax 1.2 (http://wpkg.org/email2fax/)
# 05.02.2006
# This script allows you to send faxes through your Asterisk box.
# It converts an email with either a PDF or TIFF attachment to an email with a *right*
# TIFF format, and then passes it to Asterisk, which does the fax delivery.
# (c) Tomasz Chmielewski < tch @ wpkg . org > 2005-2006
# License: GPLv2

# Variables you might want to change

FAXMAIL="FAX Server <fax@yourdomain.it>"		# email from which confirmations are sent

CHANNEL="SIP/pstn1"								# Channel you use for calling out (you probably have to
												# consult your /etc/asterisk/zapata.conf file)

LOGFILE=/var/log/asterisk/faxlog				# where to log

TMPDIR=/tmp/email2fax							# dir for temp files; must be writable by asterisk user

MAXAGE=300										# how long to keep temp files, including tiff files needed by 
												# Asterisk to send faxes; in minutes.
												# The reason for keeping these files so long is that 
												# Asterisk may not be able to send all faxes immediately.
						

# Variables that are probably OK for most systems

ASTERISKUSER=asterisk							# user under which asterisk is running; 
												# for most installations it should be "asterisk"

OUTGOINGDIR=/var/spool/asterisk/outgoing		# asterisk "outgoing" directory; for most installations
												# it should be /var/spool/asterisk/outgoing


# You probably don't have to change anything below...

DATADIR=$TMPDIR/`date +%s-%N`
EMAILFILE=$DATADIR/emailfile.eml
MESSAGEFILE=$DATADIR/message.txt

DATETIME=`date +"%A, %B %d %Y, at %R:%S"` 	# date put in email confirmations
#DATETIME=`date +"%A, %B %d %Y, at %r"`  	# date put in email confirmations, different format

VERSION="sidfax v1.1-dev"					# version

# check how we are started, print help if pipe wasn't used
[ -p /dev/stdin ]
[ $? -eq 1 ] && EMPTY=1 && cat <<EOF
$VERSION, email to fax gateway for Asterisk

Usage:

"piped message" | email2fax [OPTIONS]

Options:
--nomail	don't send a confirmation email (default: send confirmation email)
--nodelete	don't delete temporary files (default: delete temporary files)
--nofax		don't send the fax (default: send fax)
--debug		enable debug logging

Email has to contain either one PDF attachment OR one TIFF attachment, and
a destination fax number as a subject.

Examples:

This one sends a fax from the command line, and enables debug logging:

cat message.eml | sudo -u $ASTERISKUSER email2fax --debug


This one enables debug logging, doesn't send a confirmation email, 
doesn't delete temporary files, and doesn't send a fax (useful for testing etc.):

cat message.eml | sudo -u $ASTERISKUSER email2fax --debug --nomail --nodelete --nofax


This entry in .procmailrc located in asterisk home directory intercepts all emails
to asterisk, and passes them to email2fax:

:0fw
| /usr/local/bin/email2fax


By default, email2fax logs ALL messages to $LOGFILE, and saves temporary files in $TMPDIR.
These paths, along with several different variables, can be changed
at the beginning of this script ($0).

See http://wpkg.org/email2fax for updates, bug reports, and answers.

EOF

[ "$EMPTY" == "1" ] && exit 0

cat <<EOF >> $LOGFILE
--------------------------------------------------------------
$VERSION started on $DATETIME with options:

   $0 $@

EOF

# Check the error code and make a proper action
send_msg()
{

[ $1 -eq 1 -o $1 -eq 2 ] && NEWSUBJECT="FAX - Si e' verificato un problema"
[ $1 -eq 0 -a $NOFAX -eq 1 ] && NEWSUBJECT="FAX - Il fax non e' stato inviato"
[ $1 -eq 0 -a $NOFAX -eq 0 ] && NEWSUBJECT="FAX - Conferma di invio"

FAXNUMBERS=`echo $NEWNUM | sed -e "s/ /, /g"`

cat <<EOF >$MESSAGEFILE
From: $FAXMAIL
To:$SENDER
Subject: $NEWSUBJECT

Comunicazione di servizio,

EOF

case "$1" in

0)
if [ $NOFAX -eq 0 ] ; then
cat <<EOF >>$MESSAGEFILE
Il fax e' stato accettato ed inserito nella coda, sara' inviato al piu' presto.

Fax destinatario: $FAXNUMBERS
Data di accettazione: $DATETIME

=========================================================================
sidfax v1.1-dev (c) Pasquale Fiorillo < info @ pasqualefiorillo.it > 2013
Based on: email2fax (c) Tomasz Chmielewski
License: GPLv2
=========================================================================

EOF
else

cat <<EOF >>$MESSAGEFILE
L'invio dei fax e' attualmente disattivato, contatta il tuo amministratore di sistema.

Fax destinatario: $FAXNUMBERS
Data di accettazione: $DATETIME

=========================================================================
sidfax v1.1-dev (c) Pasquale Fiorillo < info @ pasqualefiorillo.it > 2013
Based on: email2fax (c) Tomasz Chmielewski
License: GPLv2
=========================================================================

EOF


fi

[ $NOMAIL -ne 1 ] && cat $MESSAGEFILE | sendmail -t
del_temp

;;

1)
echo "No e-mail message passed to email2fax, or message broken." >>$LOGFILE
cat <<EOF >>$MESSAGEFILE
Il messaggio che hai inviato e' corrotto o non valido.
Ricorda che il docuemnto allegato deve essere in formato PDF o in TIFF.
Controlla di aver inserito corretamente l'allegato e che il numero del
destinatario sia corretto, quindi riprova.
Se il problema persiste, contatta il tuo amministratore di sistema.

Fax destinatario: $FAXNUMBERS
Data di accettazione: $DATETIME

=========================================================================
sidfax v1.1-dev (c) Pasquale Fiorillo < info @ pasqualefiorillo.it > 2013
Based on: email2fax (c) Tomasz Chmielewski
License: GPLv2
=========================================================================

EOF

[ $NOMAIL -ne 1 ] && cat $MESSAGEFILE | sendmail -t
del_temp
;; 

2)
cat <<EOF >>$MESSAGEFILE
Il sistema sembra non essere configurato. Contatta il tuo amministratore di sistema.

=========================================================================
sidfax v1.1-dev (c) Pasquale Fiorillo < info @ pasqualefiorillo.it > 2013
Based on: email2fax (c) Tomasz Chmielewski
License: GPLv2
=========================================================================

Date: $DATETIME

EOF


[ $NOMAIL -ne 1 ] && echo $NOMAIL && cat $MESSAGEFILE | sendmail -t
del_temp

esac


}

# Delete temporary files if requested
del_temp()
{
if [ $NODELETE -eq 0 ] ; then
  [ $DEBUG -eq 1 ] && echo "Removing old temporary files" >>$LOGFILE
  [ $DEBUG -eq 0 ] && find $TMPDIR/* -type d -mmin +$MAXAGE -exec rm -fvr {} \; &>/dev/null
  [ $DEBUG -eq 1 ] && find $TMPDIR/* -type d -mmin +$MAXAGE -exec rm -fvr {} \; >>$LOGFILE
  echo >>$LOGFILE
else
 echo "Not removing old temporary files" >>$LOGFILE
 echo >>$LOGFILE
fi
}

# By default, our internal "error code" should be 0
ERRORCODE=0

# Check who we are; log an error and quit if we're not the same user asterisk runs
if [ $ASTERISKUSER != `whoami` ] ; then
echo "asterisk user ($ASTERISKUSER) different from the user which started email2fax (`whoami`), sending faxes won't work, can't continue!" >>$LOGFILE
ERRORCODE=2
fi

# Make sure temp dir exists and is writable
mkdir -p $DATADIR
if [ $? -ne 0 ] ; then
echo "$DATADIR not writable, can't continue!" >>$LOGFILE
ERRORCODE=2
fi

# Check if tiff2ps (should be in libtiff package) is available
if [ `which tiff2ps &>/dev/null ; echo $?` -ne 0 ] ; then
echo "tiff2ps not available (should be in libtiff package): format conversion not possible, can't continue!" >>$LOGFILE
ERRORCODE=2
fi

# Check if gs program is installed
if [ `gs -version | grep Ghostscript &>/dev/null ; echo $?` -ne 0 ] ; then
echo "Ghostscript is not installed: format conversion not possible, can't continue!" >>$LOGFILE
ERRORCODE=2
fi

# Check if "munpack" program is installed
if [ `which munpack &>/dev/null ; echo $?` -ne 0 ] ; then
echo "munpack is not installed: can't extract attachments, can't continue!" >>$LOGFILE
ERRORCODE=2
fi

# Read flags and set appropriate behaviour

[ `echo $@ | grep -i -q '\-\-nomail' ; echo $?` -eq 0 ] && NOMAIL=1 || NOMAIL=0
[ `echo $@ | grep -i -q '\-\-nodelete' ; echo $?` -eq 0 ] && NODELETE=1 || NODELETE=0
[ `echo $@ | grep -i -q '\-\-nofax' ; echo $?` -eq 0 ] && NOFAX=1 || NOFAX=0
[ `echo $@ | grep -i -q '\-\-debug' ; echo $?` -eq 0 ] && DEBUG=1 || DEBUG=0

UNKNOWN_FLAGS=`echo $@ | sed -e "s/--nomail//gI" -e "s/--nodelete//gI" -e "s/--nofax//gI" -e "s/--debug//gI"`
[ -z $UNKNOWN_FLAGS ]
[ $? -ne 0 ] && echo "WARNING: unknown flags: $UNKNOWN_FLAGS" >>$LOGFILE

if [ $DEBUG -eq 1 ] ; then
cat <<EOF >>$LOGFILE
Variables used:

FAXMAIL:      $FAXMAIL
LOGFILE:      $LOGFILE
VERSION:      $VERSION
TMPDIR:       $TMPDIR
DATADIR:      $DATADIR
EMAILFILE:    $EMAILFILE
MESSAGEFILE:  $MESSAGEFILE
DATETIME:     $DATETIME

EOF

fi

# If we can't continue, send a message with an explanation
[ $ERRORCODE -eq 2 ] && send_msg 2 && exit 2


# Make a temporary file out of an email

cat |  sed 's/$//'>$EMAILFILE 

# If input file is too short (broken email etc.)
if [ `du -b $EMAILFILE | awk '{print $1}'` -lt 15 ] ; then
echo "No e-mail message passed to email2fax, or message broken." >>$LOGFILE
send_msg 1
exit 1
fi

# Get the email address to send a confirmation to, and telephone number(s) to send faxes to
SUBJLINE=`grep -m 1 "Subject:" $EMAILFILE`
#TOLINE=`grep -m 1 "To:" $EMAILFILE.1`
SENDER=`grep -m 1 "From:" $EMAILFILE | sed -e "s/From://"`
NUMBERS=`echo $SUBJLINE | awk '{print NF}'`
SUBJECT=`echo $SUBJLINE | sed -e "s/Subject://"`


# If no fax numbers in the subject, send an explanation and quit
[ $NUMBERS -lt 2 ] && send_msg 1 && exit 1

# If no sender in file, don't send a confirmation email
[ -z "$SENDER" ] && NOMAIL=1

# Check if there are any tif or pdf attachments
TIFFATTACHCOUNT=`grep -c 'Content-Type: image/tiff;' $EMAILFILE`
PDFATTACHCOUNT=`grep -c 'Content-Type: application/pdf;' $EMAILFILE`

[ $TIFFATTACHCOUNT -gt 0 -a $PDFATTACHCOUNT -gt 0 ] && send_msg 1 && exit 1

[ $TIFFATTACHCOUNT -eq 0 -a $PDFATTACHCOUNT -eq 0 ] && send_msg 1 && exit 1

[ $TIFFATTACHCOUNT -eq 1 -a $PDFATTACHCOUNT -eq 1 ] && send_msg 1 && exit 1

# Attachment is PDF

fax_is_pdf()
{
# Extract PDF attachment
ATTNAME=`munpack -C "$DATADIR" "$EMAILFILE" | cut -f1 -d " "`

# Convert PDF attachment to TIFF in a right format
# Send an explanation if conversion wasn't successful
# Converto prima in ps utilizzando pdftops (xpdf 3.03 xpdfbin-linux-3.03.tar.gz) per evitare il bug di ghostscript 7.x
# yum install xpdf
/usr/local/bin/pdftops $DATADIR/$ATTNAME $DATADIR/$ATTNAME.ps >>$LOGFILE
cat $DATADIR/$ATTNAME.ps | gs -q -sDEVICE=tiffg3 -sPAPERSIZE=a4 -r204x196 -dNOPAUSE -sOutputFile=$DATADIR/$ATTNAME.tif - >>$LOGFILE
#cat $DATADIR/$ATTNAME | gs -q -sDEVICE=tiffg3 -sPAPERSIZE=a4 -r204x196 -dNOPAUSE -sOutputFile=$DATADIR/$ATTNAME.tif - >>$LOGFILE
[ $? -ne 0 ] && send_msg 1 && exit 1

}

fax_is_tiff()
{
# Extract TIFF attachment
ATTNAME=`munpack -C "$DATADIR" "$EMAILFILE" | cut -f1 -d " "`

# Convert TIFF attachment to PS, and then to TIFF in a right format
# send an explanation if conversion wasn't successful
tiff2ps -a $DATADIR/$ATTNAME -O $DATADIR/$ATTNAME.ps >>$LOGFILE
[ $? -ne 0 ] && send_msg 1 && exit 1
cat $DATADIR/$ATTNAME.ps | gs -q -sDEVICE=tiffg3 -sPAPERSIZE=a4 -r204x196 -dNOPAUSE -sOutputFile=$DATADIR/$ATTNAME.tif - >>$LOGFILE
[ $? -ne 0 ] && send_msg 1 && exit 1

}

if [ $TIFFATTACHCOUNT -eq 0 -a $PDFATTACHCOUNT -eq 1 ] ; then
fax_is_pdf

elif [ $TIFFATTACHCOUNT -eq 1 -a $PDFATTACHCOUNT -eq 0 ] ; then
fax_is_tiff

else
ERRORCODE=1
send_msg

fi

# Convert fax numbers from the subject field to separate numbers
SUBJLINE=`grep -m 1 "Subject:" $EMAILFILE | sed -e "s/Subject://" -e "s/[-() ]//g" -e "s/,/ /g"`

for FAXNUM in $SUBJLINE

do

[ ! -z `echo "$FAXNUM" | sed -e "s/[0-9]//g"` ] && echo "Wrong fax number: $FAXNUM" >>$LOGFILE && FAXNUM=

[ -n "$FAXNUM" ] && NEWNUM="$NEWNUM $FAXNUM"

done

# Log who sends fax where
cat <<EOF >>$LOGFILE
Fax from$SENDER to fax number(s): $NEWNUM
Attachment: $ATTNAME
EOF

# Create a .call file for asterisk
FAXDATE=`date +%s-%N`
cat <<EOF >$DATADIR/fax-$FAXDATE.call
Channel: $CHANNEL/$FAXNUM
MaxRetries: 1
WaitTime: 20
Application: txfax
Data: $DATADIR/$ATTNAME.tif|caller
EOF

# Pass tiff file to asterisk

if [ $NOFAX -eq 0 ] ; then

cp $DATADIR/fax-$FAXDATE.call $DATADIR/fax-$FAXDATE.call.copy
mv $DATADIR/fax-$FAXDATE.call $OUTGOINGDIR

else

echo "Not sending fax because --nofax was used" >>$LOGFILE

fi

echo >>$LOGFILE

send_msg 0

